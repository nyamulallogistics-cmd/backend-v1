generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String     @id @default(cuid())
  fullName               String
  email                  String     @unique
  password               String
  companyName            String
  phoneNumber            String
  role                   Role
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  bids                   Bid[]
  quotes                 Quote[]
  shipmentsAsOwner       Shipment[] @relation("CargoOwnerShipments")
  shipmentsAsTransporter Shipment[] @relation("TransporterShipments")
}

model Shipment {
  id               String             @id @default(cuid())
  cargo            String
  cargoDescription String?
  fromLocation     String
  fromAddress      String?
  toLocation       String
  toAddress        String?
  status           ShipmentStatus     @default(PENDING_PICKUP)
  amount           Float
  eta              DateTime
  progress         Int                @default(0)
  weight           Float
  distance         Float
  dimensions       String?
  pickupDate       DateTime?
  deliveryDate     DateTime?
  completedAt      DateTime?
  driverName       String?
  driverPhone      String?
  truckNumber      String?
  lastUpdate       String?
  lastUpdateTime   DateTime?
  cargoOwnerId     String
  transporterId    String?
  quoteId          String?            @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cargoOwner       User               @relation("CargoOwnerShipments", fields: [cargoOwnerId], references: [id])
  quote            Quote?             @relation(fields: [quoteId], references: [id])
  transporter      User?              @relation("TransporterShipments", fields: [transporterId], references: [id])
  progressHistory  ShipmentProgress[]

  @@index([cargoOwnerId])
  @@index([transporterId])
  @@index([status])
}

model Quote {
  id                  String      @id @default(cuid())
  cargo               String
  cargoType           String?
  cargoDescription    String?
  fromLocation        String
  fromAddress         String?
  toLocation          String
  toAddress           String?
  weight              Float
  distance            Float
  dimensions          String?
  estimatedValue      Float?
  insuranceRequired   Boolean     @default(false)
  specialInstructions String?
  pickupDate          DateTime?
  deliveryDate        DateTime?
  status              QuoteStatus @default(ACTIVE)
  expiresAt           DateTime
  cargoOwnerId        String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  bids                Bid[]
  cargoOwner          User        @relation(fields: [cargoOwnerId], references: [id])
  shipment            Shipment?

  @@index([cargoOwnerId])
  @@index([status])
  @@index([expiresAt])
}

model Bid {
  id            String   @id @default(cuid())
  amount        Float
  estimatedDays Int
  notes         String?
  isAccepted    Boolean  @default(false)
  quoteId       String
  transporterId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  quote         Quote    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  transporter   User     @relation(fields: [transporterId], references: [id])

  @@index([quoteId])
  @@index([transporterId])
  @@index([isAccepted])
}

model ShipmentProgress {
  id         String   @id @default(cuid())
  location   String?
  notes      String?
  progress   Int      @default(0)
  status     String?
  shipmentId String
  createdAt  DateTime @default(now())
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  @@index([shipmentId])
  @@index([createdAt])
}

enum Role {
  TRANSPORTER
  CARGO_OWNER
}

enum ShipmentStatus {
  PENDING_PICKUP
  AWAITING_PICKUP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum QuoteStatus {
  ACTIVE
  ACCEPTED
  EXPIRED
  CANCELLED
}
